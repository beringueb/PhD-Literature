import time
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.interpolate import interp1d
import matplotlib.ticker as ticker


data = np.loadtxt('error_N_eff.dat')



error = data[:,2][::-1]
equiv_noise = data[:,1][::-1]
lowest_noise = data[:,0][::-1]
print(lowest_noise)
print(error)

f = interp1d(lowest_noise,error)
f_inv = interp1d(error,lowest_noise)

error_ACT = 0.08
error_CCAT = f(6.)
error_rayleigh = 5.788e-2
noise_rayleigh = f_inv(error_rayleigh)

print(noise_rayleigh)

plt.rc('text', usetex = True)
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.yaxis.get_major_formatter().set_powerlimits((-1,1))

ax1.plot(lowest_noise, error,'k',lw = 4)
#ax1.plot(6,error_CCAT,marker = 'o', ms = 10)

x1,y1 = [6,6],[-1,error_CCAT]
x2,y2 = [-1,6],[error_CCAT,error_CCAT]

x1_prime,y1_prime = [noise_rayleigh,noise_rayleigh],[-1,error_rayleigh]
x2_prime,y2_prime = [-1,noise_rayleigh],[error_rayleigh,error_rayleigh]

x1_act,y1_act = [-1,100],[error_ACT,error_ACT]

ax1.set_xlim(2, 10)
ax1.set_ylim(0.045,0.075)

ax1.plot(x1, y1,color = 'b',ls = 'dashed', lw = 4, label = r'Forecast using Thomson scattering only')
ax1.plot(x2, y2,color = 'b',ls = 'dashed', lw = 4)
ax1.plot(6,error_CCAT, 'ob')
ax1.plot(x1_prime, y1_prime, color = 'g',ls = 'dashed', lw=4, label = r'Forecast using Thomson + Rayleigh scattering')
ax1.plot(x2_prime, y2_prime, color = 'g',ls = 'dashed', lw=4)
ax1.plot(noise_rayleigh,error_rayleigh, 'og')
#ax1.plot(x1_act,y1_act,'r', alpha = 0.5, label = r'Forecast for ACT 2019',lw = 4,ls = 'dashdot')



ax1.set_xlabel(r"Relative integration time or number of detectors", fontsize = 22)
ax1.set_ylabel(r"$\mathbf{\sigma(N_{\mathrm{eff}})}$", fontsize = 26) 
ax1.set_yticks(list(ax1.get_yticks()) + [error_CCAT,error_rayleigh])
ax1.tick_params('both', labelsize = 22)
t = ax1.yaxis.get_offset_text()

t.set_size(18)
ax1.legend(loc = 'center',prop = {'size':19}, fancybox = True, shadow = True,bbox_to_anchor = (0.35,0.87))
plt.suptitle(r'Improvement on $N_{\mathrm{eff}}$ thanks to Rayleigh scattering for CCAT-prime', fontsize = 20)
plt.annotate(s='', xy=(6.,0.0535), xytext=(noise_rayleigh,0.0535), arrowprops=dict(arrowstyle='<->'))
plt.annotate(s='', xy=(3,error_CCAT), xytext=(3,error_rayleigh), arrowprops=dict(arrowstyle='<->'))
plt.text(4.9, 0.055, r'$\mathbf{\times 2.1}$',fontsize=20)
plt.text(3.25, 0.059, r'$\mathbf{\approx 7\%}$',fontsize=20)
xticks = np.linspace(2,12,6)
ax1.set_xticks(xticks)
xlabels = 1/(xticks/6)**2
ax1.set_xticklabels([r'${:3.2f}$'.format(i) for i in xlabels])

plt.show()


    
