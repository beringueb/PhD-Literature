import numpy as np
import matplotlib.pyplot as plt
import subprocess
import pandas as pd
from scipy import interpolate

def KroneckerDelta(i,j) :
    if i==j :
        res = 1
    else:
        res = 0
    return res

def modify_param_init(param_names,mean,l_max) :
    param_file_init = param_file_root + "params.ini"
    #Writing param file for mean value
    with open(param_file_init) as f:
        newText = ''
        for line in f :
            for param_name in param_names :
                if param_name in line and not('#' in line) :
                    line1, line2 = line.split('=')
                    if param_name == 'scalar_amp' : 
                        line2 = '   {} \n'.format(mean[param_name]*1E-09)
                    else : 
                        line2 = '   {} \n'.format(mean[param_name])
                    line = line1 + '=' + line2
            if "l_max_scalar" in line and not('#' in line) :
                    line1, line2 = line.split('=')
                    line2 = '   {} \n'.format(l_max+100)
                    line = line1 + '=' + line2
            newText += line 
    out_file = param_file_root + "params_init.ini"
    with open(out_file, "w") as f:
        f.write(newText)

def def_cov_matrix(data, do_pol, do_rayleigh, freqs) :  
    noise =  pd.read_csv(noise_file, header = None, sep = '\s+' ,skiprows = 1  )
    if do_rayleigh :
        if  do_pol : 
            cov = np.zeros((l_max-l_min+1,2*len(freqs),2*len(freqs)))
            for i in range(len(freqs)) : 
                for j in range(len(freqs)) :
                    cov[:,i,j] = data[:,0,0,0] + (1-KroneckerDelta(i,0))* data[:,i,0,0] + (1-KroneckerDelta(j,0))*data[:,0,j,0] + (1-KroneckerDelta(i,0))*(1-KroneckerDelta(j,0))*data[:,i,j,0] + KroneckerDelta(i,j)*noise.values[l_min-2:l_max-1,i+1]
            for i in range(len(freqs)) :
                for j in range(len(freqs)) : 
                    cov[:,i+len(freqs),j+len(freqs)] = data[:,0,0,1] + (1-KroneckerDelta(i,0))* data[:,i,0,1] + (1-KroneckerDelta(j,0))*data[:,0,j,1] + (1-KroneckerDelta(i,0))*(1-KroneckerDelta(j,0))*data[:,i,j,1] + KroneckerDelta(i,j)*noise.values[l_min-2:l_max-1,i + len(freqs)+1] 
            for i in range(len(freqs)) :
               for j in range(len(freqs)) : 
                   cov[:,i,j+len(freqs)] = cov[:,j+len(freqs),i] =  data[:,0,0,2] + (1-KroneckerDelta(i,0))* data[:,i,0,2] + (1-KroneckerDelta(j,0))*data[:,0,j,2] + (1-KroneckerDelta(i,0))*(1-KroneckerDelta(j,0))*data[:,i,j,2]           
        else :
            cov = np.zeros((l_max-l_min+1,len(freqs),len(freqs))) 
            for i in range(len(freqs)) : 
                for j in range(len(freqs)) :
                    cov[:,i,j] = data[:,0,0,0] + (1-KroneckerDelta(i,0))* data[:,i,0,0] + (1-KroneckerDelta(j,0))*data[:,0,j,0] + KroneckerDelta(i,j)*noise.values[l_min-2:l_max-1,i+1] + (1-KroneckerDelta(i,0))*(1-KroneckerDelta(j,0))*data[:,i,j,0]
                
    else :
        if do_pol :
            cov = np.zeros((l_max-l_min+1,2,2))
            cov[:,0,0] = data[:,0,0,0] + noise.values[l_min-2:l_max-1,1] 
            cov[:,0,1] = data[:,0,0,2]
            cov[:,1,0] = data[:,0,0,2]
            cov[:,1,1] = data[:,0,0,1] + noise.values[l_min-2:l_max-1,1+len(freqs)] 
        else :
            cov = np.zeros((l_max-l_min+1,1,1))
            cov[:,0,0] = data[:,0,0,0] + noise.values[l_min-2:l_max-1,1] 
    return cov

def compute_error(cov_mean, deriv_cov_i, deriv_cov_j) :
    fisher_error = np.zeros((l_max-l_min+1))
    for ll in range(l_max-l_min+1) :
        inv_cov = np.linalg.inv(cov_mean[ll,:,:])
        fisher_error[ll] = np.trace(np.dot(inv_cov,np.dot(deriv_cov_i[ll,:,:],np.dot(inv_cov,deriv_cov_j[ll,:,:]))))
    fisher = np.sum((2*l+1.)/2*fisher_error)

    return fisher

def run_camb(position, sign) :
    subprocess.call("./camb {}".format(param_file_root + "PCA_init/params_PCA_{:07.2f}_{:d}.ini".format(position,sign)), shell = True, cwd = "/home/bb510/Code/CAMB/", stdout = subprocess.DEVNULL)


def modify_param_PCA(experiment, position, width, sign) :
    param_file_init = param_file_root + "params_init.ini"
    with open(param_file_init) as f:
        newText = ''
        for line in f :
            if 'Mean_PCA' in line :
                line1, line2 = line.split('=')
                line2 = '   {} \n'.format(position)     
                line = line1 + '=' + line2
            if 'Width_PCA' in line :
                line1, line2 = line.split('=')
                line2 = '   {} \n'.format(width)     
                line = line1 + '=' + line2
            if 'Do_PCA' in line :
                line1, line2 = line.split('=')
                if position == 0 :
                    line2 =   'F \n'
                else : 
                    line2 = 'T \n'
                line = line1 + '=' + line2
            if 'Amplitude_sign' in line :
                line1, line2 = line.split('=')
                line2 = '   {} \n'.format(sign)     
                line = line1 + '=' + line2
            if "output_root" in line and not('#' in line) :
                line = "output_root  = /store/DAMTP/bb510/Rayleigh/Data/camb_out/PCA/{}_{:07.2f}_{:d} \n".format(experiment,position,sign)
            newText += line 
    out_file = param_file_root + "PCA_init/params_PCA_{:07.2f}_{:d}.ini".format(position,sign) 
    with open(out_file, "w") as f:
        f.write(newText)


def reading_data(experiment, position, sign, freqs, freq_tot) :
    data_file_root =  "/store/DAMTP/bb510/Rayleigh/Data/camb_out/PCA/"
    data = np.zeros((l_max-l_min+1, len(freqs), len(freqs), 3))
    for i in range(len(freqs)) : 
        for j in range(len(freqs)) :
            data_read = pd.read_csv(data_file_root+'{}_{:07.2f}_{:d}__{:d}_{:d}'.format(experiment,position, sign, freq_tot.index(freqs[i])+1, freq_tot.index(freqs[j])+1), header = None, skiprows = 0, sep = '\s+' )
            data[:,i,j,0] = data_read.values[l_min-2:l_max-1,1] #TT
            data[:,i,j,1] = data_read.values[l_min-2:l_max-1,2] #EE
            data[:,i,j,2] = data_read.values[l_min-2:l_max-1,4] #TE
    return data

def derivative_cov(experiment, position, amplitude, freqs) : 
    cov = {}
    data_cl_plus = reading_data(experiment, position, 1, freqs, freq_tot)
    data_cl_minus = reading_data(experiment, position, -1, freqs, freq_tot)
    data_cl_fid = reading_data(experiment, 0, 1, freqs, freq_tot)
    cov_plus = def_cov_matrix(data_cl_plus, do_pol, do_rayleigh, freqs)
    cov_minus = def_cov_matrix(data_cl_minus, do_pol, do_rayleigh, freqs)
    cov_fid = def_cov_matrix(data_cl_fid, do_pol, do_rayleigh, freqs)
    deriv_cov = (cov_plus - cov_minus) / (2*amplitude) 
    return cov_fid, deriv_cov

def compute_error(cov_mean, deriv_cov_i, deriv_cov_j) :
    fisher_error = np.zeros((l_max-l_min+1))
    for ll in range(l_max-l_min+1) :
        inv_cov = np.linalg.inv(cov_mean[ll,:,:])
        fisher_error[ll] = np.trace(np.dot(inv_cov,np.dot(deriv_cov_i[ll,:,:],np.dot(inv_cov,deriv_cov_j[ll,:,:]))))
    fisher = np.sum((2*l+1.)/2*fisher_error)

    return fisher

def compute_fisher(position_list, amplitude_list, do_pol,do_rayleigh) : 
    deriv_cov = np.zeros((N+1,l_max-l_min+1,2,2))

    for i in range(len(position_list)) :
        position = position_list[i]
        amplitude = amplitude_list[i]
        modify_param_PCA(experiment,position,width,1)
        run_camb(position,1)
        modify_param_PCA(experiment,position,width,-1)
        run_camb(position,-1)
        print('Done {:d} out of {:d}'.format(i+1, len(position_list)))
        cov_fid, deriv_cov[i,:,:,:] = derivative_cov(experiment, position, amplitude, freqs)

    fisher_mat = np.zeros((len(position_list)-1,len(position_list)-1))

    for i in range(len(position_list)-1) :
 
        for j in range(len(position_list)-1) :
            fisher_mat[i,j] = compute_error(cov_fid, deriv_cov[i+1,:,:,:], deriv_cov[j+1,:,:,:])
        print('Fisher_matrix {} % done !'.format((i+1)/(len(position_list)-1)*100) )
    return fisher_mat

def interpolate_amplitude_perturbation(position_lst,fiducial_rec_file) :
    z, xe = np.loadtxt(fiducial_rec_file,usecols = (0,1), unpack = True)
    f = interpolate.interp1d(z[::-1],xe[::-1])
    amplitude = 0.01*f(position_lst)
    return amplitude

#MAIN PROGRAM

param_names = ['DM_Pann', 'helium_fraction','massless_neutrinos','hubble','ombh2','omch2', 'scalar_amp','scalar_spectral_index','re_optical_depth']
mean = {'DM_Pann':0.,'helium_fraction' : 0.25, 'massless_neutrinos' : 2.99, 'hubble' : 67.27,'ombh2' : 0.2225E-01 ,'omch2' : 0.1198, 'scalar_amp' : 2.21 ,'scalar_spectral_index' : 0.9645,'re_optical_depth' : 0.058}
delta = {'DM_Pann':1.,'helium_fraction' : 0.07, 'massless_neutrinos' : 0.8, 'hubble' : 1.5 ,'ombh2' : 4E-4 ,'omch2' : 4e-3, 'scalar_amp' : 0.1 ,'scalar_spectral_index' : 0.01,'re_optical_depth' : 0.02}
freq_tot = [0, 143, 217, 353, 545, 857]
freqs = [0, 143, 217, 353, 545, 857]
experiment = 'PLANCK'
param_file_root = "/home/bb510/Code/CAMB/"
noise_file = '/home/bb510/Code/Rayleigh/noise/noise_PLANCK.txt'
fiducial_rec_file = '../visibilities/PCA/xe_pos_0000.00_1.txt'
l_min = 2
l_max = 3000 
l = np.linspace(l_min,l_max, l_max-l_min+1)

N = 160
width = (3000-200)/(2*(N+1.))
position_list_tmp = np.linspace(200,3000,N)
position_list = np.append([0],position_list_tmp)

amplitude_list_tmp = interpolate_amplitude_perturbation(position_list_tmp, fiducial_rec_file)
amplitude_list = np.append([1],amplitude_list_tmp)
#print(amplitude_list)
#print(position_list)

modify_param_init(param_names,mean,l_max)

for do_pol in [True] :
    for do_rayleigh in [False] :
        fisher = compute_fisher(position_list, amplitude_list, do_pol,do_rayleigh)
        if do_pol :
           str1 = 'p'
        else :
           str1 = 'nop'
        if do_rayleigh :
           str2 = 'r'
        else : 
           str2 = 'nor'
        np.savetxt('../fisher_matrices/PCA/fisher_{}_{}_PLANCK_PCA.txt'.format(str2,str1), fisher, delimiter = '   ', newline = '\n')
        update = False
print("Done !")



